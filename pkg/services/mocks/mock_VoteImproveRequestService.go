// Code generated by mockery v2.33.2. DO NOT EDIT.

package servicesmocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// VoteImproveRequestService is an autogenerated mock type for the VoteImproveRequestService type
type VoteImproveRequestService struct {
	mock.Mock
}

type VoteImproveRequestService_Expecter struct {
	mock *mock.Mock
}

func (_m *VoteImproveRequestService) EXPECT() *VoteImproveRequestService_Expecter {
	return &VoteImproveRequestService_Expecter{mock: &_m.Mock}
}

// Vote provides a mock function with given fields: ctx, id, userID, upVotes, downVotes
func (_m *VoteImproveRequestService) Vote(ctx context.Context, id uuid.UUID, userID uuid.UUID, upVotes int, downVotes int) error {
	ret := _m.Called(ctx, id, userID, upVotes, downVotes)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, int, int) error); ok {
		r0 = rf(ctx, id, userID, upVotes, downVotes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VoteImproveRequestService_Vote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Vote'
type VoteImproveRequestService_Vote_Call struct {
	*mock.Call
}

// Vote is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - userID uuid.UUID
//   - upVotes int
//   - downVotes int
func (_e *VoteImproveRequestService_Expecter) Vote(ctx interface{}, id interface{}, userID interface{}, upVotes interface{}, downVotes interface{}) *VoteImproveRequestService_Vote_Call {
	return &VoteImproveRequestService_Vote_Call{Call: _e.mock.On("Vote", ctx, id, userID, upVotes, downVotes)}
}

func (_c *VoteImproveRequestService_Vote_Call) Run(run func(ctx context.Context, id uuid.UUID, userID uuid.UUID, upVotes int, downVotes int)) *VoteImproveRequestService_Vote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(int), args[4].(int))
	})
	return _c
}

func (_c *VoteImproveRequestService_Vote_Call) Return(_a0 error) *VoteImproveRequestService_Vote_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *VoteImproveRequestService_Vote_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, int, int) error) *VoteImproveRequestService_Vote_Call {
	_c.Call.Return(run)
	return _c
}

// NewVoteImproveRequestService creates a new instance of VoteImproveRequestService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVoteImproveRequestService(t interface {
	mock.TestingT
	Cleanup(func())
}) *VoteImproveRequestService {
	mock := &VoteImproveRequestService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
