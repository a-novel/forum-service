// Code generated by mockery v2.20.0. DO NOT EDIT.

package servicesmocks

import (
	context "context"

	models "github.com/a-novel/forum-service/pkg/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ListImproveRequestRevisionsService is an autogenerated mock type for the ListImproveRequestRevisionsService type
type ListImproveRequestRevisionsService struct {
	mock.Mock
}

type ListImproveRequestRevisionsService_Expecter struct {
	mock *mock.Mock
}

func (_m *ListImproveRequestRevisionsService) EXPECT() *ListImproveRequestRevisionsService_Expecter {
	return &ListImproveRequestRevisionsService_Expecter{mock: &_m.Mock}
}

// List provides a mock function with given fields: ctx, id
func (_m *ListImproveRequestRevisionsService) List(ctx context.Context, id uuid.UUID) ([]*models.ImproveRequestRevisionPreview, error) {
	ret := _m.Called(ctx, id)

	var r0 []*models.ImproveRequestRevisionPreview
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*models.ImproveRequestRevisionPreview, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*models.ImproveRequestRevisionPreview); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.ImproveRequestRevisionPreview)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListImproveRequestRevisionsService_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type ListImproveRequestRevisionsService_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *ListImproveRequestRevisionsService_Expecter) List(ctx interface{}, id interface{}) *ListImproveRequestRevisionsService_List_Call {
	return &ListImproveRequestRevisionsService_List_Call{Call: _e.mock.On("List", ctx, id)}
}

func (_c *ListImproveRequestRevisionsService_List_Call) Run(run func(ctx context.Context, id uuid.UUID)) *ListImproveRequestRevisionsService_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ListImproveRequestRevisionsService_List_Call) Return(_a0 []*models.ImproveRequestRevisionPreview, _a1 error) *ListImproveRequestRevisionsService_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListImproveRequestRevisionsService_List_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]*models.ImproveRequestRevisionPreview, error)) *ListImproveRequestRevisionsService_List_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewListImproveRequestRevisionsService interface {
	mock.TestingT
	Cleanup(func())
}

// NewListImproveRequestRevisionsService creates a new instance of ListImproveRequestRevisionsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewListImproveRequestRevisionsService(t mockConstructorTestingTNewListImproveRequestRevisionsService) *ListImproveRequestRevisionsService {
	mock := &ListImproveRequestRevisionsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
