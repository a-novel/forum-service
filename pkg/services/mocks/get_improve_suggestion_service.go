// Code generated by mockery v2.20.0. DO NOT EDIT.

package servicesmocks

import (
	context "context"

	models "github.com/a-novel/forum-service/pkg/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// GetImproveSuggestionService is an autogenerated mock type for the GetImproveSuggestionService type
type GetImproveSuggestionService struct {
	mock.Mock
}

type GetImproveSuggestionService_Expecter struct {
	mock *mock.Mock
}

func (_m *GetImproveSuggestionService) EXPECT() *GetImproveSuggestionService_Expecter {
	return &GetImproveSuggestionService_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, id
func (_m *GetImproveSuggestionService) Get(ctx context.Context, id uuid.UUID) (*models.ImproveSuggestion, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.ImproveSuggestion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.ImproveSuggestion, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.ImproveSuggestion); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ImproveSuggestion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImproveSuggestionService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type GetImproveSuggestionService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *GetImproveSuggestionService_Expecter) Get(ctx interface{}, id interface{}) *GetImproveSuggestionService_Get_Call {
	return &GetImproveSuggestionService_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *GetImproveSuggestionService_Get_Call) Run(run func(ctx context.Context, id uuid.UUID)) *GetImproveSuggestionService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *GetImproveSuggestionService_Get_Call) Return(_a0 *models.ImproveSuggestion, _a1 error) *GetImproveSuggestionService_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GetImproveSuggestionService_Get_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*models.ImproveSuggestion, error)) *GetImproveSuggestionService_Get_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewGetImproveSuggestionService interface {
	mock.TestingT
	Cleanup(func())
}

// NewGetImproveSuggestionService creates a new instance of GetImproveSuggestionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGetImproveSuggestionService(t mockConstructorTestingTNewGetImproveSuggestionService) *GetImproveSuggestionService {
	mock := &GetImproveSuggestionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
