// Code generated by mockery v2.33.2. DO NOT EDIT.

package servicesmocks

import (
	context "context"

	models "github.com/a-novel/forum-service/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// SearchImproveSuggestionsService is an autogenerated mock type for the SearchImproveSuggestionsService type
type SearchImproveSuggestionsService struct {
	mock.Mock
}

type SearchImproveSuggestionsService_Expecter struct {
	mock *mock.Mock
}

func (_m *SearchImproveSuggestionsService) EXPECT() *SearchImproveSuggestionsService_Expecter {
	return &SearchImproveSuggestionsService_Expecter{mock: &_m.Mock}
}

// Search provides a mock function with given fields: ctx, query
func (_m *SearchImproveSuggestionsService) Search(ctx context.Context, query models.SearchImproveSuggestionsQuery) ([]*models.ImproveSuggestion, int, error) {
	ret := _m.Called(ctx, query)

	var r0 []*models.ImproveSuggestion
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SearchImproveSuggestionsQuery) ([]*models.ImproveSuggestion, int, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SearchImproveSuggestionsQuery) []*models.ImproveSuggestion); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.ImproveSuggestion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SearchImproveSuggestionsQuery) int); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, models.SearchImproveSuggestionsQuery) error); ok {
		r2 = rf(ctx, query)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SearchImproveSuggestionsService_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type SearchImproveSuggestionsService_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - ctx context.Context
//   - query models.SearchImproveSuggestionsQuery
func (_e *SearchImproveSuggestionsService_Expecter) Search(ctx interface{}, query interface{}) *SearchImproveSuggestionsService_Search_Call {
	return &SearchImproveSuggestionsService_Search_Call{Call: _e.mock.On("Search", ctx, query)}
}

func (_c *SearchImproveSuggestionsService_Search_Call) Run(run func(ctx context.Context, query models.SearchImproveSuggestionsQuery)) *SearchImproveSuggestionsService_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.SearchImproveSuggestionsQuery))
	})
	return _c
}

func (_c *SearchImproveSuggestionsService_Search_Call) Return(_a0 []*models.ImproveSuggestion, _a1 int, _a2 error) *SearchImproveSuggestionsService_Search_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *SearchImproveSuggestionsService_Search_Call) RunAndReturn(run func(context.Context, models.SearchImproveSuggestionsQuery) ([]*models.ImproveSuggestion, int, error)) *SearchImproveSuggestionsService_Search_Call {
	_c.Call.Return(run)
	return _c
}

// NewSearchImproveSuggestionsService creates a new instance of SearchImproveSuggestionsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSearchImproveSuggestionsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *SearchImproveSuggestionsService {
	mock := &SearchImproveSuggestionsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
