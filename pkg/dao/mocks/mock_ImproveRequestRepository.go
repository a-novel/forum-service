// Code generated by mockery v2.33.2. DO NOT EDIT.

package daomocks

import (
	context "context"

	dao "github.com/a-novel/forum-service/pkg/dao"
	mock "github.com/stretchr/testify/mock"

	time "time"

	uuid "github.com/google/uuid"
)

// ImproveRequestRepository is an autogenerated mock type for the ImproveRequestRepository type
type ImproveRequestRepository struct {
	mock.Mock
}

type ImproveRequestRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ImproveRequestRepository) EXPECT() *ImproveRequestRepository_Expecter {
	return &ImproveRequestRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, userID, title, content, sourceID, id, now
func (_m *ImproveRequestRepository) Create(ctx context.Context, userID uuid.UUID, title string, content string, sourceID uuid.UUID, id uuid.UUID, now time.Time) (*dao.ImproveRequestPreview, error) {
	ret := _m.Called(ctx, userID, title, content, sourceID, id, now)

	var r0 *dao.ImproveRequestPreview
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string, uuid.UUID, uuid.UUID, time.Time) (*dao.ImproveRequestPreview, error)); ok {
		return rf(ctx, userID, title, content, sourceID, id, now)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string, uuid.UUID, uuid.UUID, time.Time) *dao.ImproveRequestPreview); ok {
		r0 = rf(ctx, userID, title, content, sourceID, id, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.ImproveRequestPreview)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, string, uuid.UUID, uuid.UUID, time.Time) error); ok {
		r1 = rf(ctx, userID, title, content, sourceID, id, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImproveRequestRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ImproveRequestRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - title string
//   - content string
//   - sourceID uuid.UUID
//   - id uuid.UUID
//   - now time.Time
func (_e *ImproveRequestRepository_Expecter) Create(ctx interface{}, userID interface{}, title interface{}, content interface{}, sourceID interface{}, id interface{}, now interface{}) *ImproveRequestRepository_Create_Call {
	return &ImproveRequestRepository_Create_Call{Call: _e.mock.On("Create", ctx, userID, title, content, sourceID, id, now)}
}

func (_c *ImproveRequestRepository_Create_Call) Run(run func(ctx context.Context, userID uuid.UUID, title string, content string, sourceID uuid.UUID, id uuid.UUID, now time.Time)) *ImproveRequestRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(string), args[4].(uuid.UUID), args[5].(uuid.UUID), args[6].(time.Time))
	})
	return _c
}

func (_c *ImproveRequestRepository_Create_Call) Return(_a0 *dao.ImproveRequestPreview, _a1 error) *ImproveRequestRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ImproveRequestRepository_Create_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, string, uuid.UUID, uuid.UUID, time.Time) (*dao.ImproveRequestPreview, error)) *ImproveRequestRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *ImproveRequestRepository) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ImproveRequestRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ImproveRequestRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *ImproveRequestRepository_Expecter) Delete(ctx interface{}, id interface{}) *ImproveRequestRepository_Delete_Call {
	return &ImproveRequestRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *ImproveRequestRepository_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *ImproveRequestRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ImproveRequestRepository_Delete_Call) Return(_a0 error) *ImproveRequestRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ImproveRequestRepository_Delete_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *ImproveRequestRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRevision provides a mock function with given fields: ctx, id
func (_m *ImproveRequestRepository) DeleteRevision(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ImproveRequestRepository_DeleteRevision_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRevision'
type ImproveRequestRepository_DeleteRevision_Call struct {
	*mock.Call
}

// DeleteRevision is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *ImproveRequestRepository_Expecter) DeleteRevision(ctx interface{}, id interface{}) *ImproveRequestRepository_DeleteRevision_Call {
	return &ImproveRequestRepository_DeleteRevision_Call{Call: _e.mock.On("DeleteRevision", ctx, id)}
}

func (_c *ImproveRequestRepository_DeleteRevision_Call) Run(run func(ctx context.Context, id uuid.UUID)) *ImproveRequestRepository_DeleteRevision_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ImproveRequestRepository_DeleteRevision_Call) Return(_a0 error) *ImproveRequestRepository_DeleteRevision_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ImproveRequestRepository_DeleteRevision_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *ImproveRequestRepository_DeleteRevision_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *ImproveRequestRepository) Get(ctx context.Context, id uuid.UUID) (*dao.ImproveRequestPreview, error) {
	ret := _m.Called(ctx, id)

	var r0 *dao.ImproveRequestPreview
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*dao.ImproveRequestPreview, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *dao.ImproveRequestPreview); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.ImproveRequestPreview)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImproveRequestRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type ImproveRequestRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *ImproveRequestRepository_Expecter) Get(ctx interface{}, id interface{}) *ImproveRequestRepository_Get_Call {
	return &ImproveRequestRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *ImproveRequestRepository_Get_Call) Run(run func(ctx context.Context, id uuid.UUID)) *ImproveRequestRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ImproveRequestRepository_Get_Call) Return(_a0 *dao.ImproveRequestPreview, _a1 error) *ImproveRequestRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ImproveRequestRepository_Get_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*dao.ImproveRequestPreview, error)) *ImproveRequestRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetRevision provides a mock function with given fields: ctx, id
func (_m *ImproveRequestRepository) GetRevision(ctx context.Context, id uuid.UUID) (*dao.ImproveRequestRevisionModel, error) {
	ret := _m.Called(ctx, id)

	var r0 *dao.ImproveRequestRevisionModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*dao.ImproveRequestRevisionModel, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *dao.ImproveRequestRevisionModel); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.ImproveRequestRevisionModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImproveRequestRepository_GetRevision_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRevision'
type ImproveRequestRepository_GetRevision_Call struct {
	*mock.Call
}

// GetRevision is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *ImproveRequestRepository_Expecter) GetRevision(ctx interface{}, id interface{}) *ImproveRequestRepository_GetRevision_Call {
	return &ImproveRequestRepository_GetRevision_Call{Call: _e.mock.On("GetRevision", ctx, id)}
}

func (_c *ImproveRequestRepository_GetRevision_Call) Run(run func(ctx context.Context, id uuid.UUID)) *ImproveRequestRepository_GetRevision_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ImproveRequestRepository_GetRevision_Call) Return(_a0 *dao.ImproveRequestRevisionModel, _a1 error) *ImproveRequestRepository_GetRevision_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ImproveRequestRepository_GetRevision_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*dao.ImproveRequestRevisionModel, error)) *ImproveRequestRepository_GetRevision_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, ids
func (_m *ImproveRequestRepository) List(ctx context.Context, ids []uuid.UUID) ([]*dao.ImproveRequestPreview, error) {
	ret := _m.Called(ctx, ids)

	var r0 []*dao.ImproveRequestPreview
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) ([]*dao.ImproveRequestPreview, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) []*dao.ImproveRequestPreview); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dao.ImproveRequestPreview)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uuid.UUID) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImproveRequestRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type ImproveRequestRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []uuid.UUID
func (_e *ImproveRequestRepository_Expecter) List(ctx interface{}, ids interface{}) *ImproveRequestRepository_List_Call {
	return &ImproveRequestRepository_List_Call{Call: _e.mock.On("List", ctx, ids)}
}

func (_c *ImproveRequestRepository_List_Call) Run(run func(ctx context.Context, ids []uuid.UUID)) *ImproveRequestRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID))
	})
	return _c
}

func (_c *ImproveRequestRepository_List_Call) Return(_a0 []*dao.ImproveRequestPreview, _a1 error) *ImproveRequestRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ImproveRequestRepository_List_Call) RunAndReturn(run func(context.Context, []uuid.UUID) ([]*dao.ImproveRequestPreview, error)) *ImproveRequestRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListRevisions provides a mock function with given fields: ctx, id
func (_m *ImproveRequestRepository) ListRevisions(ctx context.Context, id uuid.UUID) ([]*dao.ImproveRequestRevisionPreview, error) {
	ret := _m.Called(ctx, id)

	var r0 []*dao.ImproveRequestRevisionPreview
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*dao.ImproveRequestRevisionPreview, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*dao.ImproveRequestRevisionPreview); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dao.ImproveRequestRevisionPreview)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImproveRequestRepository_ListRevisions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRevisions'
type ImproveRequestRepository_ListRevisions_Call struct {
	*mock.Call
}

// ListRevisions is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *ImproveRequestRepository_Expecter) ListRevisions(ctx interface{}, id interface{}) *ImproveRequestRepository_ListRevisions_Call {
	return &ImproveRequestRepository_ListRevisions_Call{Call: _e.mock.On("ListRevisions", ctx, id)}
}

func (_c *ImproveRequestRepository_ListRevisions_Call) Run(run func(ctx context.Context, id uuid.UUID)) *ImproveRequestRepository_ListRevisions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ImproveRequestRepository_ListRevisions_Call) Return(_a0 []*dao.ImproveRequestRevisionPreview, _a1 error) *ImproveRequestRepository_ListRevisions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ImproveRequestRepository_ListRevisions_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]*dao.ImproveRequestRevisionPreview, error)) *ImproveRequestRepository_ListRevisions_Call {
	_c.Call.Return(run)
	return _c
}

// Search provides a mock function with given fields: ctx, query, limit, offset
func (_m *ImproveRequestRepository) Search(ctx context.Context, query dao.ImproveRequestSearchQuery, limit int, offset int) ([]*dao.ImproveRequestPreview, int, error) {
	ret := _m.Called(ctx, query, limit, offset)

	var r0 []*dao.ImproveRequestPreview
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, dao.ImproveRequestSearchQuery, int, int) ([]*dao.ImproveRequestPreview, int, error)); ok {
		return rf(ctx, query, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dao.ImproveRequestSearchQuery, int, int) []*dao.ImproveRequestPreview); ok {
		r0 = rf(ctx, query, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dao.ImproveRequestPreview)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dao.ImproveRequestSearchQuery, int, int) int); ok {
		r1 = rf(ctx, query, limit, offset)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, dao.ImproveRequestSearchQuery, int, int) error); ok {
		r2 = rf(ctx, query, limit, offset)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ImproveRequestRepository_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type ImproveRequestRepository_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - ctx context.Context
//   - query dao.ImproveRequestSearchQuery
//   - limit int
//   - offset int
func (_e *ImproveRequestRepository_Expecter) Search(ctx interface{}, query interface{}, limit interface{}, offset interface{}) *ImproveRequestRepository_Search_Call {
	return &ImproveRequestRepository_Search_Call{Call: _e.mock.On("Search", ctx, query, limit, offset)}
}

func (_c *ImproveRequestRepository_Search_Call) Run(run func(ctx context.Context, query dao.ImproveRequestSearchQuery, limit int, offset int)) *ImproveRequestRepository_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dao.ImproveRequestSearchQuery), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *ImproveRequestRepository_Search_Call) Return(_a0 []*dao.ImproveRequestPreview, _a1 int, _a2 error) *ImproveRequestRepository_Search_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ImproveRequestRepository_Search_Call) RunAndReturn(run func(context.Context, dao.ImproveRequestSearchQuery, int, int) ([]*dao.ImproveRequestPreview, int, error)) *ImproveRequestRepository_Search_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateVotes provides a mock function with given fields: ctx, id, upVotes, downVotes
func (_m *ImproveRequestRepository) UpdateVotes(ctx context.Context, id uuid.UUID, upVotes int, downVotes int) error {
	ret := _m.Called(ctx, id, upVotes, downVotes)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) error); ok {
		r0 = rf(ctx, id, upVotes, downVotes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ImproveRequestRepository_UpdateVotes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateVotes'
type ImproveRequestRepository_UpdateVotes_Call struct {
	*mock.Call
}

// UpdateVotes is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - upVotes int
//   - downVotes int
func (_e *ImproveRequestRepository_Expecter) UpdateVotes(ctx interface{}, id interface{}, upVotes interface{}, downVotes interface{}) *ImproveRequestRepository_UpdateVotes_Call {
	return &ImproveRequestRepository_UpdateVotes_Call{Call: _e.mock.On("UpdateVotes", ctx, id, upVotes, downVotes)}
}

func (_c *ImproveRequestRepository_UpdateVotes_Call) Run(run func(ctx context.Context, id uuid.UUID, upVotes int, downVotes int)) *ImproveRequestRepository_UpdateVotes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *ImproveRequestRepository_UpdateVotes_Call) Return(_a0 error) *ImproveRequestRepository_UpdateVotes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ImproveRequestRepository_UpdateVotes_Call) RunAndReturn(run func(context.Context, uuid.UUID, int, int) error) *ImproveRequestRepository_UpdateVotes_Call {
	_c.Call.Return(run)
	return _c
}

// NewImproveRequestRepository creates a new instance of ImproveRequestRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewImproveRequestRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ImproveRequestRepository {
	mock := &ImproveRequestRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
