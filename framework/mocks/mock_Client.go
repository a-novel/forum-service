// Code generated by mockery v2.33.2. DO NOT EDIT.

package frameworkmocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/a-novel/forum-service/pkg/models"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// GetImproveRequest provides a mock function with given fields: ctx, query
func (_m *Client) GetImproveRequest(ctx context.Context, query models.GetImproveRequestQuery) (*models.ImproveRequestPreview, error) {
	ret := _m.Called(ctx, query)

	var r0 *models.ImproveRequestPreview
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.GetImproveRequestQuery) (*models.ImproveRequestPreview, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.GetImproveRequestQuery) *models.ImproveRequestPreview); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ImproveRequestPreview)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.GetImproveRequestQuery) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetImproveRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetImproveRequest'
type Client_GetImproveRequest_Call struct {
	*mock.Call
}

// GetImproveRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - query models.GetImproveRequestQuery
func (_e *Client_Expecter) GetImproveRequest(ctx interface{}, query interface{}) *Client_GetImproveRequest_Call {
	return &Client_GetImproveRequest_Call{Call: _e.mock.On("GetImproveRequest", ctx, query)}
}

func (_c *Client_GetImproveRequest_Call) Run(run func(ctx context.Context, query models.GetImproveRequestQuery)) *Client_GetImproveRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.GetImproveRequestQuery))
	})
	return _c
}

func (_c *Client_GetImproveRequest_Call) Return(_a0 *models.ImproveRequestPreview, _a1 error) *Client_GetImproveRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetImproveRequest_Call) RunAndReturn(run func(context.Context, models.GetImproveRequestQuery) (*models.ImproveRequestPreview, error)) *Client_GetImproveRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetImproveSuggestion provides a mock function with given fields: ctx, query
func (_m *Client) GetImproveSuggestion(ctx context.Context, query models.GetImproveSuggestionQuery) (*models.ImproveSuggestion, error) {
	ret := _m.Called(ctx, query)

	var r0 *models.ImproveSuggestion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.GetImproveSuggestionQuery) (*models.ImproveSuggestion, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.GetImproveSuggestionQuery) *models.ImproveSuggestion); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ImproveSuggestion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.GetImproveSuggestionQuery) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetImproveSuggestion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetImproveSuggestion'
type Client_GetImproveSuggestion_Call struct {
	*mock.Call
}

// GetImproveSuggestion is a helper method to define mock.On call
//   - ctx context.Context
//   - query models.GetImproveSuggestionQuery
func (_e *Client_Expecter) GetImproveSuggestion(ctx interface{}, query interface{}) *Client_GetImproveSuggestion_Call {
	return &Client_GetImproveSuggestion_Call{Call: _e.mock.On("GetImproveSuggestion", ctx, query)}
}

func (_c *Client_GetImproveSuggestion_Call) Run(run func(ctx context.Context, query models.GetImproveSuggestionQuery)) *Client_GetImproveSuggestion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.GetImproveSuggestionQuery))
	})
	return _c
}

func (_c *Client_GetImproveSuggestion_Call) Return(_a0 *models.ImproveSuggestion, _a1 error) *Client_GetImproveSuggestion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetImproveSuggestion_Call) RunAndReturn(run func(context.Context, models.GetImproveSuggestionQuery) (*models.ImproveSuggestion, error)) *Client_GetImproveSuggestion_Call {
	_c.Call.Return(run)
	return _c
}

// VoteImproveRequest provides a mock function with given fields: ctx, form
func (_m *Client) VoteImproveRequest(ctx context.Context, form models.UpdateImproveRequestVotesForm) error {
	ret := _m.Called(ctx, form)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UpdateImproveRequestVotesForm) error); ok {
		r0 = rf(ctx, form)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_VoteImproveRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VoteImproveRequest'
type Client_VoteImproveRequest_Call struct {
	*mock.Call
}

// VoteImproveRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - form models.UpdateImproveRequestVotesForm
func (_e *Client_Expecter) VoteImproveRequest(ctx interface{}, form interface{}) *Client_VoteImproveRequest_Call {
	return &Client_VoteImproveRequest_Call{Call: _e.mock.On("VoteImproveRequest", ctx, form)}
}

func (_c *Client_VoteImproveRequest_Call) Run(run func(ctx context.Context, form models.UpdateImproveRequestVotesForm)) *Client_VoteImproveRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.UpdateImproveRequestVotesForm))
	})
	return _c
}

func (_c *Client_VoteImproveRequest_Call) Return(_a0 error) *Client_VoteImproveRequest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_VoteImproveRequest_Call) RunAndReturn(run func(context.Context, models.UpdateImproveRequestVotesForm) error) *Client_VoteImproveRequest_Call {
	_c.Call.Return(run)
	return _c
}

// VoteImproveSuggestion provides a mock function with given fields: ctx, form
func (_m *Client) VoteImproveSuggestion(ctx context.Context, form models.UpdateImproveSuggestionVotesForm) error {
	ret := _m.Called(ctx, form)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UpdateImproveSuggestionVotesForm) error); ok {
		r0 = rf(ctx, form)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_VoteImproveSuggestion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VoteImproveSuggestion'
type Client_VoteImproveSuggestion_Call struct {
	*mock.Call
}

// VoteImproveSuggestion is a helper method to define mock.On call
//   - ctx context.Context
//   - form models.UpdateImproveSuggestionVotesForm
func (_e *Client_Expecter) VoteImproveSuggestion(ctx interface{}, form interface{}) *Client_VoteImproveSuggestion_Call {
	return &Client_VoteImproveSuggestion_Call{Call: _e.mock.On("VoteImproveSuggestion", ctx, form)}
}

func (_c *Client_VoteImproveSuggestion_Call) Run(run func(ctx context.Context, form models.UpdateImproveSuggestionVotesForm)) *Client_VoteImproveSuggestion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.UpdateImproveSuggestionVotesForm))
	})
	return _c
}

func (_c *Client_VoteImproveSuggestion_Call) Return(_a0 error) *Client_VoteImproveSuggestion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_VoteImproveSuggestion_Call) RunAndReturn(run func(context.Context, models.UpdateImproveSuggestionVotesForm) error) *Client_VoteImproveSuggestion_Call {
	_c.Call.Return(run)
	return _c
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
